# This is an alias file
# Run `ln -s $(pwd)/<thisfile> ~/.aliases

# Append aliases as `alias=<cmd>`
alias mktmp="cd $(mktemp -d)"
alias adoc=asciidoctor
alias adocpdf=asciidoctor-pdf
alias py=python3
alias yt="youtube-dl -f mp4"

# Start a hugo server with logs
alias hl="hugo serve --logFile $(date +%Y-%m-%d-%H%M%S).log --log -D"

# Quick python3 venv init
# alias pyinit="python3 -m venv env && source env/bin/activate && pip install --upgrade pip setuptools && pip install pylint autopep8 && echo 'env' >> .gitignore"
alias pyinit=pyinit_func

# Convenient way to output date to ISO 8601 format
if [ "brew ls --versions coreutils" > /dev/null ]; then
  alias dateiso="gdate --iso-8601=seconds"
else
  echo "Run 'brew install coreutils'"
fi

# Use create-react-app with typescript
if [ "create-react-app" > /dev/null ]; then
  alias create-react-app-ts="create-react-app --scripts-version=react-scripts-ts"
else
  echo "Requires create-react-app installed globally"
fi

# For Headless Chrome(s). Point to chrome binaries in /Applications folder
# Run with "<binary> --headless --disable-gpu --remote-debugging-port=9222 <url>"
alias chrome="/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"
alias chromecan="/Applications/Google\ Chrome\ Canary.app/Contents/MacOS/Google\ Chrome\ Canary"
#alias chromium="/Applications/Chromium.app/Contents/MacOS/Chromium"

# === Sketch dev environment
# Switch on plugin autoreload
alias sketch_autoreload_on="defaults write ~/Library/Preferences/com.bohemiancoding.sketch3.plist AlwaysReloadScript -bool YES && defaults read ~/Library/Preferences/com.bohemiancoding.sketch3.plist AlwaysReloadScript"
# Switch off plugin autoreload
alias sketch_autoreload_off="defaults write ~/Library/Preferences/com.bohemiancoding.sketch3.plist AlwaysReloadScript -bool NO && defaults read ~/Library/Preferences/com.bohemiancoding.sketch3.plist AlwaysReloadScript"

# datenow prints ISO-8601 date time to stdout
alias datenow="date +%Y-%m-%dT%H:%M:%S%z"

alias datenowfriendly="date +%Y-%m-%dT%H%M%S"

# takes two inputs and returns a boolean
# $1: line (str) to find
# $2: file to iterate through
# greps $2 to find a string
# grep -F (--fixed-strings) -x (--line-regexp; matches whole line) -q (--quiet)
# NOTE: You can't actually return values with bash functions
# only exit codes. Access the returned function with 'local funccall "arg"; echo $?'
checkLineExists() {
    findme=$1
    filename=$2
    if [[ $# -eq 0 ]]; then
        echo Requires 2 args: "string to check for" "filename"
        return 2 # fails 
    else
        if $(cat $2 | grep -Fxq "$1"); then
            return 0 # string found
        else
            return 1 # string not found
        fi
    fi
}

pyinit_func() {
    # check for python3 binary
    if [ ! -x "$(command -v python3)" ]; then
        echo python not found
        return 2
    fi

    python3 -m venv env && source env/bin/activate && pip install --upgrade pip setuptools && pip install pylint autopep8 doc8
    
    checkLineExists "env" ".gitignore"
    local exists=$?
    if [ "$exists" -eq 0 ]; then
        echo 'env' already exists in .gitignore
        return 0 # exit if env exists in gitignore
    elif [ "$exists" -eq 1 ]; then
        echo Appending 'env' to .gitignore
        echo 'env' >> .gitignore
    else
        echo Warning: Could not append to .gitignore. Check if file exists.
        return 1
    fi
}


comparestr() {
  if [[ $# -ne 2 ]]; then
    echo Compares 2 strings.
    echo Usage: comparestr "first string" "second string"
    return
  else
    if [[ "$1" == "$2" ]]; then
      echo strings are equal
      echo 1. "$1"
      echo 2. "$2"
    else
      echo strings are not equal
      echo 1. "$1"
      echo 2. "$2"
    fi
  fi
}

comparehash() {
  if [[ $# -ne 2 ]]; then
    echo Compares a file\'s sha256 hash to a given string
    echo Usage: comparehash "filename" "hash_to_compare_to"
    return
  fi
  # check if 1st arg is file
  if [[ -f $1 ]]; then
    hash1=$(sha256sum "$1" | cut -f 1 -d ' ')
    echo hash1 is "$hash1"
    comparestr "$hash1" "$2"
  else
    echo First argument must be file
  fi
}
